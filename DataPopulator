        ///////////////Populate Departments
        List<Map<String, Object>> docdata = new ArrayList<Map<String, Object>>();
        String[] departmentList = new String[]{
                "medicine",
                "surgery",
                "gynaecology",
                "obstetrics",
                "paediatrics",
                "eye",
                "ENT",
                "dental",
                "orthopaedics",
                "neurology",
                "cardiology",
                "psychiatry",
                "skin",
                "V.D.",
                "plastic surgery",
                "nuclear medicine",
                "infectious disease"
        };

        for (String departmentName : departmentList){
            HashMap<String, Object> newHashmap = (new HashMap<String, Object>());
            newHashmap.put("name", departmentName);
            docdata.add(newHashmap);
        }

        for (Map<String, Object> docdatum : docdata) {
            ApiFuture<DocumentReference> docRef = db.collection("Departments").add(docdatum);
            System.out.println(docRef.get());
        }


        ///////PATIENTS///////

        List<Map<String, Object>> patientData = new ArrayList<>();
        String[] names = {"John Doe", "Jane Smith", "Michael Johnson", "Emily Brown", "David Davis", "Sarah Wilson"};
        String[] bloodTypes = {"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"};
        Random random = new Random();

        for (int i = 0; i < 20; i++) { // Assuming 20 patients
            HashMap<String, Object> patientMap = new HashMap<>();
            String name = names[random.nextInt(names.length)];
            int age = random.nextInt(80) + 18; // Random age between 18 and 97
            String phoneNumber = generateRandomPhoneNumber();
            String address = "Address " + (i + 1); // Example address, can be randomized too
            String bloodType = bloodTypes[random.nextInt(bloodTypes.length)];

            patientMap.put("name", name);
            patientMap.put("age", age);
            patientMap.put("phoneNumber", phoneNumber);
            patientMap.put("address", address);
            patientMap.put("bloodType", bloodType);

            patientData.add(patientMap);
        }

        // Add patients to Firestore collection
        for (Map<String, Object> patient : patientData) {
            ApiFuture<DocumentReference> docRef = db.collection("Patients").add(patient);
            try {
                System.out.println("Added patient with ID: " + docRef.get().getId());
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }


        List<Map<String, Object>> docdata = new ArrayList<>();
        String[] departmentList = new String[]{
                "medicine", "surgery", "gynaecology", "obstetrics", "paediatrics", "eye", "ENT", "dental",
                "orthopaedics", "neurology", "cardiology", "psychiatry", "skin", "V.D.", "plastic surgery",
                "nuclear medicine", "infectious disease"
        };

        // Adding department information
        for (String departmentName : departmentList) {
            HashMap<String, Object> departmentData = new HashMap<>();
            departmentData.put("name", departmentName);
            docdata.add(departmentData);
        }

        // Adding doctors information with randomized names and departments
        String[] doctorFirstNames = {"Dr. John", "Dr. Emily", "Dr. Michael", "Dr. Sarah", "Dr. David"};
        String[] doctorLastNames = {"Smith", "Johnson", "Williams", "Brown", "Jones"};

        Random rand = new Random();

        for (int i = 1; i <= 20; i++) {
            String firstName = doctorFirstNames[rand.nextInt(doctorFirstNames.length)];
            String lastName = doctorLastNames[rand.nextInt(doctorLastNames.length)];
            String department = departmentList[rand.nextInt(departmentList.length)];

            HashMap<String, Object> doctorData = new HashMap<>();
            doctorData.put("name", firstName + " " + lastName);
            doctorData.put("job", "Doctor");
            doctorData.put("department", department);
            docdata.add(doctorData);
        }

        // Adding documents to Firestore
        for (Map<String, Object> data : docdata) {
            ApiFuture<DocumentReference> docRef = db.collection("Staffs").add(data);
            // Print the document reference
            System.out.println("Added document with ID: " + docRef.get().getId());
        }

    private static String getRandomName() {
        String[] firstNames = {"John", "Emily", "Michael", "Sarah", "David", "Lisa", "Matthew", "Jessica", "Daniel", "Nicole"};
        String[] lastNames = {"Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez"};

        Random rand = new Random();
        String firstName = firstNames[rand.nextInt(firstNames.length)];
        String lastName = lastNames[rand.nextInt(lastNames.length)];

        return firstName + " " + lastName;
    }

        //MEDREC

            List<Patient> allPatients = PatientDAO.getAllPatients();
            List<Map<String, Object>> doctorList = new ArrayList<>();
            try {
                for (QueryDocumentSnapshot qds : DBManager.getInstance().getDocumentsByConditions(DBManager.CollectionPath.STAFF, Filter.equalTo("job", "Doctor"))) {
                    Map<String, Object> newMap = qds.getData();
                    newMap.put("doctorID", qds.getId());
                    doctorList.add(newMap);
                }
            } catch (ExecutionException | InterruptedException e) {
                System.out.println("Error retrieving doctor IDs");
            }

            Random random = new Random();
            for (int i = 0; i < 20; i++) {
                Map<String, Object> chosenDoc = doctorList.get(random.nextInt(doctorList.size()));

                String medicalRecordId = "medrec" + i; // Unique ID for each medical record
                String patientId = allPatients.get(random.nextInt(allPatients.size())).getPatientId(); // Random patient ID
                DeptType deptType = DeptType.fromValue((String) chosenDoc.get("department")); // Random department type
                String assignedDoctorId = (String) chosenDoc.get("doctorID"); // Random doctor ID
                Timestamp creationTimestamp = Timestamp.now(); // Current timestamp
                Timestamp completionTimestamp = null; // Completion timestamp initially null
                String diagnosis = null; // Initial diagnosis null
                String treatment = null; // Initial treatment null
                MedicalRecord.Status status = MedicalRecord.Status.PENDING; // Initial status PENDING
                String comments = null; // Initial comments null

                MedicalRecord newMedRec = new MedicalRecord(
                        medicalRecordId,
                        patientId,
                        deptType,
                        assignedDoctorId,
                        creationTimestamp,
                        completionTimestamp,
                        diagnosis,
                        status,
                        treatment,
                        comments
                );

                MedRecDAO.addMedRec(newMedRec);
                System.out.println("Added MedRec with id medrec" + i);
            }

Hệ thống status của medicalRecord, machine, medicine
Hệ thống xếp lịch
